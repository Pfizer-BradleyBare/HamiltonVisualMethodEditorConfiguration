
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 6/13/2022 11:15:08 AM

#pragma once
#ifndef HSL_RUNTIME
namespace VACUUM_CONFIG {
function _InitLibrary() { }
function _ExitLibrary() { }
function GetSupportedVacuumCollectionPlateSequences( variable & o_SupportedVacuumCollectionPlateSequences[] ) void { }
function GetSupportedVacuumCollectionPlateTypes( variable & o_SupportedVacuumCollectionPlateTypes[] ) void { }
function GetSupportedVacuumPlateSequences( variable & o_SupportedVacuumPlateSequences[] ) void { }
function GetSupportedVacuumPlates( variable & o_SupportedVacuumPlates[] ) void { }
function GetVacuumComPorts( variable & o_VacuumComPorts[] ) void { }
function GetVacuumManifoldSequenceStrings( variable & o_VacuumManifoldSequenceStrings[] ) void { }
function GetVacuumParkSequenceStrings( variable & o_VacuumParkSequenceStrings[] ) void { }
function GetVacuumPressureLevels( variable & o_VacuumPressureLevels[] ) void { }
function Init(  ) void { }
global variable _MODULE_VACUUM_CONFIG_SupportedVacuumCollectionPlateSequences[];
global variable _MODULE_VACUUM_CONFIG_SupportedVacuumPlateNames[];
global variable _MODULE_VACUUM_CONFIG_VacuumManifoldSequences[];
global variable _MODULE_VACUUM_CONFIG_SupportedVacuumCollectionPlateTypes[];
global variable _MODULE_VACUUM_CONFIG_VacuumComPorts[];
global variable _MODULE_VACUUM_CONFIG_SupportedVacuumPlateSequences[];
global variable _MODULE_VACUUM_CONFIG_VacuumPressureLevels[];
global variable _MODULE_VACUUM_CONFIG_VacuumManifoldParkSequences[];
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=BAREB$$valid=0$$time=2022-06-13 11:15$$checksum=c561152e$$length=082$$